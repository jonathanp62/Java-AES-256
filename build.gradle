/*
 * (#)build.gradle  0.3.0   07/06/2024
 * (#)build.gradle  0.2.0   06/26/2024
 * (#)build.gradle  0.1.0   06/26/2024
 *
 * @author   Jonathan Parker
 * @version  0.3.0
 * @since    0.1.0
 *
 * MIT License
 *
 * Copyright (c) 2024 Jonathan M. Parker
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * The following system property must be set in HOME/.gradle/gradle.properties:
 *   systemProp.macosArchitecture=intel -or-
 *   systemProp.macosArchitecture=silicon
 */

plugins {
    id 'application'
    id 'java'
    id 'maven-publish'
}

apply plugin : 'java'

ext {
    appConfigFile = '-Dapp.configurationFile=config/config.json'
    execDescription = 'Run the main class with JavaExecTask'
    execGroup = 'Execution'
    javaMainClass = 'net.jmp.aes256.Main'
    logConfigFile = '-Dlogback.configurationFile=config/logback.xml'
    macosArchitecture = System.getProperty('macosArchitecture')
    useAssertions = '-ea'
}

println "The macOS architecture is ${macosArchitecture}"

application {
    mainClass.set(javaMainClass)
}

repositories {
    mavenLocal()
    mavenCentral()  // url = uri('https://repo.maven.apache.org/maven2/')

    maven {
        url = uri('http://maven.repository.redhat.com/techpreview/all')

        allowInsecureProtocol = true
    }

    maven {
        url = uri('http://localhost:8081/nexus/content/repositories/releases')

        allowInsecureProtocol = true
    }
}

dependencies {
    runtimeOnly         libs.ch.qos.logback.logback.classic
    runtimeOnly         libs.ch.qos.logback.logback.core
    implementation      libs.com.google.code.gson.gson
    implementation      libs.commons.cli.commons.cli
    implementation      libs.org.slf4j.slf4j.api
    implementation      libs.org.slf4j.slf4j.ext
    testImplementation  libs.junit.junit
}

group = 'net.jmp.aes256'
version = '0.3.0'
description = 'AES-256'

println "The groupId is ${project.group}"
println "The artifactId is ${project.name}" // Set in settings.gradle
println "The version is ${project.version}"

java.sourceCompatibility = JavaVersion.VERSION_22

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(22)
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

/*
 * Execute with - gradle exec... instead of gradle run
 */

tasks.register('execNoArgs', JavaExec) {
    allJvmArgs = [useAssertions, appConfigFile, logConfigFile] as List<String>
    classpath = sourceSets.main.runtimeClasspath
    description = execDescription
    group = execGroup
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
}

tasks.register('execHelpOption', JavaExec) {
    args('-h')
    allJvmArgs = [useAssertions, appConfigFile, logConfigFile] as List<String>
    classpath = sourceSets.main.runtimeClasspath
    description = execDescription
    group = execGroup
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
}

tasks.register('execHelpOperation', JavaExec) {
    args('help')
    allJvmArgs = [useAssertions, appConfigFile, logConfigFile] as List<String>
    classpath = sourceSets.main.runtimeClasspath
    description = execDescription
    group = execGroup
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
}

tasks.register('execDecryptStringNoUser', JavaExec) {
    args('decrypt', '--string', 'The quick brown fox jumped over the lazy dog!')
    allJvmArgs = [useAssertions, appConfigFile, logConfigFile] as List<String>
    classpath = sourceSets.main.runtimeClasspath
    description = execDescription
    group = execGroup
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
    standardInput = System.in
}

tasks.register('execDecryptStringUser', JavaExec) {
    args('decrypt', '--string', 'The quick brown fox jumped over the lazy dog!', '--user', 'jonathanp62@gmail.com')
    allJvmArgs = [useAssertions, appConfigFile, logConfigFile] as List<String>
    classpath = sourceSets.main.runtimeClasspath
    description = execDescription
    group = execGroup
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
    standardInput = System.in
}

tasks.register('execDecryptFileNoUser', JavaExec) {
    args('decrypt', '--input-file', '/usr/local/input-file.encrypted', '--output-file', '/usr/local/output-file.txt')
    allJvmArgs = [useAssertions, appConfigFile, logConfigFile] as List<String>
    classpath = sourceSets.main.runtimeClasspath
    description = execDescription
    group = execGroup
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
    standardInput = System.in
}

tasks.register('execDecryptFileUser', JavaExec) {
    args('decrypt', '--input-file', '/usr/local/input-file.encrypted', '--output-file', '/usr/local/output-file.txt', '--user', 'jonathanp62@gmail.com')
    allJvmArgs = [useAssertions, appConfigFile, logConfigFile] as List<String>
    classpath = sourceSets.main.runtimeClasspath
    description = execDescription
    group = execGroup
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
    standardInput = System.in
}

tasks.register('execEncryptStringNoUser', JavaExec) {
    args('encrypt', '--string', 'The quick brown fox jumped over the lazy dog!')
    allJvmArgs = [useAssertions, appConfigFile, logConfigFile] as List<String>
    classpath = sourceSets.main.runtimeClasspath
    description = execDescription
    group = execGroup
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
    standardInput = System.in
}

tasks.register('execEncryptStringUser', JavaExec) {
    args('encrypt', '--string', 'The quick brown fox jumped over the lazy dog!', '--user', 'jonathanp62@gmail.com')
    allJvmArgs = [useAssertions, appConfigFile, logConfigFile] as List<String>
    classpath = sourceSets.main.runtimeClasspath
    description = execDescription
    group = execGroup
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
    standardInput = System.in
}

tasks.register('execEncryptFileNoUser', JavaExec) {
    args('encrypt', '--input-file', '/usr/local/input-file.txt', '--output-file', '/usr/local/output-file.encrypted')
    allJvmArgs = [useAssertions, appConfigFile, logConfigFile] as List<String>
    classpath = sourceSets.main.runtimeClasspath
    description = execDescription
    group = execGroup
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
    standardInput = System.in
}

tasks.register('execEncryptFileUser', JavaExec) {
    args('encrypt', '--input-file', '/usr/local/input-file.txt', '--output-file', '/usr/local/output-file.encrypted', '--user', 'jonathanp62@gmail.com')
    allJvmArgs = [useAssertions, appConfigFile, logConfigFile] as List<String>
    classpath = sourceSets.main.runtimeClasspath
    description = execDescription
    group = execGroup
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
    standardInput = System.in
}

tasks.register('execUnknown', JavaExec) {
    args('unknown')
    allJvmArgs = [useAssertions, appConfigFile, logConfigFile] as List<String>
    classpath = sourceSets.main.runtimeClasspath
    description = execDescription
    group = execGroup
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    mainClass = javaMainClass
    standardInput = System.in
}
